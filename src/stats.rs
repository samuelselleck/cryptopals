use std::collections::HashMap;

use crate::cryptobuff::CryptoBuff;

pub type Alphabet<'a> = &'a [(u8, f64)];

pub const ASCII_FREQUENCIES: Alphabet = &[
    (b' ', 0.13000),
    (b'!', 0.00113),
    (b'"', 0.00022),
    (b'#', 0.00001),
    (b'$', 0.00004),
    (b'%', 0.00006),
    (b'&', 0.00071),
    (b'\'', 0.00065),
    (b'(', 0.00066),
    (b')', 0.00067),
    (b'*', 0.00006),
    (b'+', 0.00006),
    (b',', 0.00303),
    (b'-', 0.00128),
    (b'.', 0.00337),
    (b'/', 0.00018),
    (b'0', 0.00974),
    (b'1', 0.00882),
    (b'2', 0.00661),
    (b'3', 0.00334),
    (b'4', 0.00281),
    (b'5', 0.00256),
    (b'6', 0.00228),
    (b'7', 0.00255),
    (b'8', 0.00212),
    (b'9', 0.00179),
    (b':', 0.00007),
    (b';', 0.00007),
    (b'<', 0.00003),
    (b'=', 0.00001),
    (b'>', 0.00003),
    (b'?', 0.00101),
    (b'@', 0.00002),
    (b'A', 0.00777),
    (b'B', 0.00143),
    (b'C', 0.00277),
    (b'D', 0.00458),
    (b'E', 0.01324),
    (b'F', 0.00222),
    (b'G', 0.00201),
    (b'H', 0.00649),
    (b'I', 0.00618),
    (b'J', 0.00010),
    (b'K', 0.00070),
    (b'L', 0.00404),
    (b'M', 0.00260),
    (b'N', 0.00693),
    (b'O', 0.00779),
    (b'P', 0.00166),
    (b'Q', 0.00009),
    (b'R', 0.00496),
    (b'S', 0.00568),
    (b'T', 0.00930),
    (b'U', 0.00318),
    (b'V', 0.00098),
    (b'W', 0.00236),
    (b'X', 0.00015),
    (b'Y', 0.00210),
    (b'Z', 0.00013),
    (b'[', 0.00007),
    (b'\\', 0.00000),
    (b']', 0.00007),
    (b'^', 0.00002),
    (b'_', 0.00087),
    (b'`', 0.00008),
    (b'a', 0.06532),
    (b'b', 0.01243),
    (b'c', 0.02139),
    (b'd', 0.03496),
    (b'e', 0.10414),
    (b'f', 0.01902),
    (b'g', 0.01661),
    (b'h', 0.04967),
    (b'i', 0.05667),
    (b'j', 0.00092),
    (b'k', 0.00590),
    (b'l', 0.03204),
    (b'm', 0.01979),
    (b'n', 0.05578),
    (b'o', 0.06094),
    (b'p', 0.01392),
    (b'q', 0.00081),
    (b'r', 0.04976),
    (b's', 0.05128),
    (b't', 0.07507),
    (b'u', 0.02275),
    (b'v', 0.00796),
    (b'w', 0.01719),
    (b'x', 0.00149),
    (b'y', 0.01483),
    (b'z', 0.00078),
    (b'{', 0.00005),
    (b'|', 0.00000),
    (b'}', 0.00005),
    (b'~', 0.00003),
    (b'\x7F', 0.00001),
];

pub fn textlike_score(cb: &CryptoBuff) -> f64 {
    const ALPHABET: Alphabet = ASCII_FREQUENCIES;

    let mut counts = HashMap::new();
    for c in cb.bytes() {
        *counts.entry(c).or_default() += 1;
    }

    let total_ascii_chars: u32 = ALPHABET
        .iter()
        .map(|(c, _)| counts.get(c).unwrap_or(&0))
        .sum();

    let mut score = (cb.len() as f64 - total_ascii_chars as f64) / 10.0; //lower is better
    for (c, f) in ALPHABET {
        let count: u32 = counts.remove(c).unwrap_or_default();
        let dist = (count as f64) / (total_ascii_chars as f64) - f;
        score += dist.abs();
    }
    score
}
